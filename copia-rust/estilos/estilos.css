/* =================================== */

/* Este é meu primeiro site, então não investi muito na "estética" e organização do código (classes, etc).
   O foco foi mais a funcionalidade (estilos, responsividade e experiência do usuário). */

/* =================================== */


/*	ALINHAMENTO

    align-self
    justify-content: alinha na horizontal
    align-items: alinha na vertical
    text-align
    vertical-align
    float: para alinhar uma imagem, para alinhar os itens de uma lista (pode ser usada junto com "clear")
    
    RESPONSIVIDADE
    
    display: flex (para elementos unidimencionais, ou seja, que têm somente linha ou somente coluna),
                grid (para elementos bidimencionais, que precisam ser distribuídos em linhas e colunas, de diferentes tamanhos),
                table (para elementos bidimencionais, que não precisam ser "distribuídos" ao reduzir o tamanho da viewport)
*/

/* ===================================================== */
/*  GERAL */
/* ===================================================== */

/* Usar fontes do Google Fonts */
/* @import url('https://fonts.googleapis.com/css2?family=Alfa+Slab+One&family=Fira+Sans&display=swap'); */

@import url('https://fonts.googleapis.com/css2?family=Alfa+Slab+One&family=Fira+Sans:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap');

* {
    margin: 0;
    padding: 0;
    /* determina que a borda e o "padding" estão contidos no tamanho do elemento */
    box-sizing: border-box;
}

body {
	/* a fonte entre parênteses indica que vem de um local externo (neste caso, do Google Fonts) */
    font-family: 'Fira Sans', Helvetica, Arial, sans-serif;
	font-size: 1.1rem;
    /* garante que o tamanho mínimo do conteúdo seja igual à altura da viewport */
    min-height: 100vh;
}

div, footer, section {
    /* aplicar borda aos elementos, para melhor visualização durante o desenvolvimento */
    border: solid black 1px;
}

section {
    padding-top: 40px;
}

select {
    height: 1.5rem;
}

h1 {
    font-size: 6rem;
    font-family: "Alfa Slab One", serif;
    font-weight: normal;
	/* não usei o line-height porque o padding fica melhor em todos os tamanhos de tela,
	   já que quando a tela é pequena o texto quebra linha e o line-height acaba afastando demais uma linha da outra */
    /* line-height: 10rem; */
	/* padding top e bottom apenas */
	padding: 20px 0;
}

h2 {
    font-size: 2.25rem;
    font-weight: 800;
    line-height: 1.25;
	letter-spacing: 1px;
}

h3 {
	font-size: 2.25rem;
    font-weight: 600;
    line-height: 1.25;
	padding: 25px 0 35px 0;
}

p {
	line-height: 1.5;
	font-size: 1.125rem;
}

p > a {
	color: white;
}

.cl-margem {
    /* estabelecemos uma largura "máxima" para o header */
	/* a largura precisa ser fixa (não pode ser relativa, com % por exemplo), para ele não "espremer" os elementos contidos ao diminuir o tamanho da viewport */
	max-width: 72rem;
	/* depois colocamos margem automática nas laterais, assim o elemento fica automaticamente centralizado na horizontal */
	margin: 0 auto;
    padding: 0 12px;
}

.cl-linha {
    display: inline-block;
}

.cl-divisor {
    width: 120%;
	min-height: 12px;
    /* o left negativo + a position relative fazem o divisor deslocar-se para a esquerda, fora do elemento pai */
    left: -10px;
    position: relative;
}

.cl-bk-roxo {
    background-color: rgb(46, 36, 89);
}

.cl-divisor-sub {
	max-width: 350px;
}

.cl-paragrafo {
	padding: 30px 0;
}

.cl-construa {
	text-align: center;
	font-size: 1.7rem;
}

/* ===================================================== */
/*  NAVBAR */
/* ===================================================== */

nav {
    display: flex;
    /* Faz as colunas se deslocarem para baixo quando o tamanho da viewport fica menor */
    flex-wrap: wrap;
	/* se usar apenas "height" aqui, quando ocorrer o "wrap", os elementos que se deslocarem para baixo ficarão escondidos atrás do main, pois a altura do nav não vai aumentar */
    min-height: 80px;
    /* Mantém as colunas centralizadas na horizontal quando o tamanho da viewport fica menor */
    justify-content: center;
}

#logo-dv {
    display: flex;
    background-color: white; /* coral; */
    flex: 150px;
    justify-content: left;
	align-items: center;
    height: 80px;
	/* Faz as divs de "menu" e "idioma" ficarem com a largura da viewport ao serem 
	   movidas para as "linhas" de baixo quando diminuimos o tamanho da tela */
	flex-grow: 8;
}

#logo-dv > a {
	height: inherit;
	background-color: white;/* darkseagreen; */
    /* fica mais fácil de clicar se aumentamos um pouco a área "clicável" do link */
    line-height: 2em;
}

#logo-dv > a > img {
    /* alinhar as imagens à erquerda no elemento e de modo que o elemento se molde à altura da imagem */
    float: left;
	height: inherit;
}

#menu-dv {
    display: flex;
    flex-wrap: wrap;
    background-color: white; /* bisque; */
    justify-content: center;
    align-items: center;
	/* Faz as divs de "menu" e "idioma" ficarem com a largura da viewport ao serem 
	   movidas para as "linhas" de baixo quando diminuimos o tamanho da tela */
	flex-grow: 1;
}

#menu-dv > a {
    /* mantém um afastamento entre os links */
    margin-inline: 1.5em;
	margin-block: .5em;
	color: black;
}

#idioma-dv {
    display: flex;
    background-color: white; /* aquamarine; */
    width: 150px;
    justify-content: center;
    /* centraliza o "select" na vertical e também ajusta o tamanho dele */
    align-items: center;
	min-height: 40px;
	/* Faz as divs de "menu" e "idioma" ficarem com a largura da viewport ao serem 
	   movidas para as "linhas" de baixo quando diminuimos o tamanho da tela */
	flex-grow: 1;
}

/* ===================================================== */
/*  HEADER */
/* ===================================================== */

header {
	/* faz o "comece-dv" (onde está o botão) ir para a direita, já que o flex-direction padrão é "row" */
	display: flex;
	background-color: white; /*rgb(163, 140, 219);*/
}

#apresentacao-hd {
    padding: 10px 12px 100px;
}

#apresentacao-dv {
    padding-right: 50px;
	background-color: white; /* rgb(140, 196, 219); */
	/* Faz a div de apresentacao ficar com a largura da viewport ao diminuir o tamanho da tela */
	flex-grow: 6;
}

#apresentacao-p {
    font-size: 2.25rem;
    font-weight: normal;
	line-height: 1.25;
}

#comece-dv {
	/* faz a div do botão ocupar todo o espaço restante no header */
	flex: 1;
	display: flex;
	flex-direction: column;
	/* centraliza o link de "versão" */
	align-items: center;
	background-color: white; /*rgb(219, 140, 157);*/
	
}

#comece-bt {
    display: table-cell;
    /* garante que a largura do botão ficará fixa ao reduzir o tamanho da tela */
    min-width: 350px;
    /* aumenta a altura do botão e alinha o texto na vertical */
    line-height: 80px;
    /* alinha o texto na horizontal */
    text-align: center;
	background-color: #ffc832;
	/* colocamos a borda na mesma cor do background para criar a ilusão de que não existe borda */
	border: solid #ffc832 1px;
	font-family: inherit;
	font-weight: bold;
	font-size: 1.6rem;
    /* remove o underline nativo do link */
    text-decoration: none;
	letter-spacing: .1rem;
	text-transform: uppercase;
	cursor: pointer;
	border-radius: 4px;
	margin-top: 40px;
	color: black;
}

#comece-bt:hover {
	border-color: black;
}

#versao-lk {
	color: #4299bf;
	font-size: 1.6rem;
	letter-spacing: .05rem;
	margin: 20px 0;
}

/* ===================================================== */
/*  Session 1: Por que Rust? */
/* ===================================================== */

.cl-section {
	min-height: 470px;
	padding-bottom: 80px;
}

.cl-dv-section {
    display: flex;
	justify-content: space-between;
	gap: 30px;
}

.cl-bk-verde {
    background-color: #0b7261;
}

.cl-branco {
    color: white;
}

#produtividade-dv {
	padding-bottom: 30px;
}

.cl-bk-roxo {
    background-color: #2e2459;
}

.cl-bk-vermelho {
    background-color: #a72145;
}